from typing import Optional

from pydantic import BaseModel


class AgentResponse(BaseModel):
    """
    Base class for agent responses. Provides a method to convert the response
    to a dictionary, filtering out None values.
    """

    def to_dict(self) -> dict:
        """
        Converts the response object to a dictionary, excluding keys with None values.

        Returns:
            dict: A dictionary representation of the response.
        """
        current_dict = self.model_dump(mode="python")
        return {key: value for key, value in current_dict.items() if value is not None}


class AgentTextualResponse(AgentResponse):
    """
    Represents a textual response from the agent.

    Attributes:
        response (str): The textual response generated by the agent.
    """

    response: str


class AgentActionResponse(AgentResponse):
    """
    Represents an action response from the agent.

    Attributes:
        action (str): The action to be performed by the agent.
        objectId (Optional[str]): The ID of the object involved in the action, if any.
        degrees (Optional[float]): The degrees of rotation, if applicable.
    """

    action: str
    objectId: Optional[str] = None
    degrees: Optional[float] = None
